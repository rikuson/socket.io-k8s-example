#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-socketio-redis-sample:server');
const http = require('http');
const { Server } = require('socket.io');
const { createAdapter } = require('@socket.io/redis-streams-adapter');
const redis = require('../redis.js');
const DataStore = require('../data-store.js')(redis);

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const roomData = new DataStore('room');
redis.connect().then(() => {
  const io = new Server(server, {
    adapter: createAdapter(redis),
    connectionStateRecovery: {
      maxDisconnectionDuration: 2 * 60 * 1000,
      skipMiddlewares: true,
    },
  });
  io.on('connection', onConnection.bind(io));
  io.of('/').adapter.on('create-room', onCreateRoom.bind(io));
  io.of('/').adapter.on('delete-room', onDeleteRoom.bind(io));
  io.of('/').adapter.on('join-room', onJoinRoom.bind(io));
  process.on('SIGTERM', () => io.close());
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for WebSocket server "connection" event.
 */

async function onConnection(socket) {
  const { roomId, userName } = socket.handshake.query;
  console.log(`Socket is connected`, {
    query: socket.handshake.query,
    data: socket.data,
    recovered: socket.recovered,
  });
  socket.join(roomId);
  socket.on('disconnect', () => {
    console.log('Socket is disconnected');
  });
  socket.on('message', async ({ message }) => {
    console.log(`Receive ${userName}'s message "${message}"`);
    const room = await roomData.find(roomId);
    const { messages = [] } = await room?.getState();
    room.setState({ messages: [...messages, { id: socket.id, userName, message }] });
    this.to(roomId).emit('message', { id: socket.id, userName, message });
  });
  await roomData.transaction(roomId, async () => {
    const room = await roomData.create(roomId, {});
  });
}

/**
 * Event listener for WebSocket server "join-room" event.
 */

async function onCreateRoom(roomId) {
  console.log(`Room ${roomId} was created`);
  this.emit('create-room', { roomId });
}

/**
 * Event listener for WebSocket server "join-room" event.
 */

async function onJoinRoom(roomId, id) {
  console.log(`Socket ${id} has joined room ${roomId}`);
  await roomData.transaction(roomId, async (room) => {
    const state = await room?.getState();
    if (!state) {
      return;
    }
    this.to(id).emit('join-room', {
      roomId,
      id,
      messages: state.messages || [],
    });
  });
}

/**
 * Event listener for WebSocket server "delete-room" event.
 */

async function onDeleteRoom(roomId) {
  console.log(`Room ${roomId} was deleted`);
  await roomData.delete(roomId);
  this.emit('delete-room', { roomId });
}
